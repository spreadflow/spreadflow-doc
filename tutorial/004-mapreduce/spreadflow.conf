# -*- coding: utf-8 -*-
#
# Using Loadfile and SetComputedValue
# ===================================
#
# This spredaflow configuration script demonstrates how to use the MapReduce
# component to merge multiple documents.
#
# Usage:
# spreadflow-twistd -n  -c tutorial/004-mapreduce/spreadflow.conf
#
# Visualization:
# spreadflow-confviz tutorial/004-mapreduce/spreadflow.conf > /tmp/config.svg
# firefox /tmp/config.svg

# Import the configuration script utilities (Chain and Duplicate).
from spreadflow_core.script import Process, ChainTemplate, DuplicatorTemplate

# Import observers and processors.
from spreadflow_core.proc import DebugLog
from spreadflow_delta.proc import Filter, Loadfile, SetComputedValue, MapReduce
from spreadflow_observer_fs.source import FilesystemObserverSource

# Setup the environment.
import functools
import os
import platform
import re

directory = os.getcwd()
use_spotlight = platform.system() == 'Darwin'

def is_readme(key, doc):
    """
    Returns True if the given record points to a readme file.
    """
    filename = os.path.basename(doc['path'])
    return filename.lower().startswith('readme')

def count_words(key, doc):
    """
    Counts the number of words in a given document.
    """
    return len(re.findall(r'\w+', doc['content']))

def map_readme_text(key, doc):
    """
    Map callback for mapreduce operation.
    """
    yield 'combined-readme.rst', {
        'words': doc['words'],
        'content': 'File: {:s} ({:d})\n{:s}\n\n'.format(doc['path'], doc['words'], doc['content'])
    }

def reduce_readme_text(key, docs):
    """
    Reduce callback for mapreduce operation.
    """
    def _combine_text(first, second):
        return {
            'words': first['words'] + second['words'],
            'content': first['content'] + second['content']
        }

    return functools.reduce(_combine_text, docs)

def sort_key_readme_text(key, doc, dockey):
    """
    Sort key callback for mapreduce operation.
    """
    return key, doc['words']


@Process()
class ReadmeConcat(ChainTemplate):
    """
    A chain which concatenates all readme files into one ordered by the number of
    words.
    """
    chain = (
        Filter(is_readme),
        Loadfile(encoding='utf-8'),
        SetComputedValue('words', count_words),
        MapReduce(map=map_readme_text, reduce=reduce_readme_text, sort_key=sort_key_readme_text),
        DebugLog()
    )

@Process()
class RstMonitor(ChainTemplate):
    """
    A chain which monitors changes to all reStructured text files in the
    current directory. Change records are printed to the console.
    """
    chain = (
        FilesystemObserverSource("kMDItemFSName endswith[c] '.rst'" if use_spotlight else "*.rst", directory),
        DuplicatorTemplate("ReadmeConcat"),
    )
