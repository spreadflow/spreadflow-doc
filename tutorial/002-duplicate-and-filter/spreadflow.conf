# -*- coding: utf-8 -*-
#
# Using Duplicate and Filter
# ==========================
#
# This spredaflow configuration script demonstrates how to use Duplicate and
# Filter in order to branch of chains according to some property of a file.
#
# Usage:
# spreadflow-twistd -n  -c tutorial/002-duplicate-and-filter/spreadflow.conf
#
# Visualization:
# spreadflow-confviz tutorial/002-duplicate-and-filter/spreadflow.conf > /tmp/config.svg
# firefox /tmp/config.svg

# Import the configuration script utilities.
from spreadflow_core.script import Process, ChainTemplate, DuplicatorTemplate

# Import observers and processors.
from spreadflow_core.proc import DebugLog
from spreadflow_delta.proc import Filter
from spreadflow_observer_fs.source import FilesystemObserverSource

# Setup the environment.
import os
import platform

directory = os.getcwd()
use_spotlight = platform.system() == 'Darwin'

def is_readme(key, doc):
    """
    Returns True if the given record points to a readme file.
    """
    filename = os.path.basename(doc['path'])
    return filename.lower().startswith('readme')

@Process()
class ReadmeLogger(ChainTemplate):
    """
    A chain which only acts on readme files.
    """
    chain = (
        Filter(is_readme),
        DebugLog()
    )

@Process()
class RstMonitor(ChainTemplate):
    """
    A chain which monitors changes to all reStructured text files in the
    current directory. Change records are printed to the console.
    """
    chain = (
        FilesystemObserverSource("kMDItemFSName endswith[c] '.rst'" if use_spotlight else "*.rst", directory),
        DuplicatorTemplate("ReadmeLogger"),
    )
