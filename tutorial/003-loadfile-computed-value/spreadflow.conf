# -*- coding: utf-8 -*-
#
# Using Loadfile and SetComputedValue
# ===================================
#
# This spredaflow configuration script demonstrates how to use Loadfile to act
# on file content and SetComputedValue to add new keys to the document record.
#
# Usage:
# spreadflow-twistd -n  -c tutorial/003-loadfile-computed-value/spreadflow.conf

# Import the configuration script utilities (Chain and Duplicate).
from spreadflow_core.script import Process, ChainTemplate, DuplicatorTemplate

# Import observers and processors.
from spreadflow_core.proc import DebugLog
from spreadflow_delta.proc import Filter, Loadfile, SetComputedValue
from spreadflow_observer_fs.source import FilesystemObserverSource

# Setup the environment.
import os
import platform
import re

directory = os.getcwd()
use_spotlight = platform.system() == 'Darwin'

def is_readme(key, doc):
    """
    Returns True if the given record points to a readme file.
    """
    filename = os.path.basename(doc['path'])
    return filename.lower().startswith('readme')

def count_words(key, doc):
    """
    Counts the number of words in a given document.
    """
    return len(re.findall(r'\w+', doc['content']))

@Process()
class ReadmeWordCountLogger(ChainTemplate):
    """
    A chain which counts the words in readme files.
    """
    chain = (
        Filter(is_readme),
        Loadfile(encoding='utf-8'),
        SetComputedValue('words', count_words),
        DebugLog()
    )

@Process()
class RstMonitor(ChainTemplate):
    """
    A chain which monitors changes to all reStructured text files in the
    current directory. Change records are printed to the console.
    """
    chain = (
        FilesystemObserverSource("kMDItemFSName endswith[c] '.rst'" if use_spotlight else "*.rst", directory),
        DuplicatorTemplate("ReadmeWordCountLogger"),
    )
